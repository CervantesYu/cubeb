# TODO
# - backend selection by OS/cmdline (i.e. not hardcoded)

cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(cubeb
        VERSION 0.0.0)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

add_library(cubeb
  src/cubeb.c
  src/cubeb_resampler.cpp
  src/cubeb_panner.cpp
   $<TARGET_OBJECTS:speex>)
target_include_directories(cubeb PUBLIC include)
target_include_directories(cubeb PRIVATE src src/speex)

include(GenerateExportHeader)
generate_export_header(cubeb EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/exports/cubeb_export.h)
target_include_directories(cubeb PUBLIC ${CMAKE_BINARY_DIR}/exports)

add_library(speex OBJECT
  src/speex/resample.c)
set_target_properties(speex PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
target_compile_definitions(speex PRIVATE OUTSIDE_SPEEX)
target_compile_definitions(speex PRIVATE FLOATING_POINT)
target_compile_definitions(speex PRIVATE EXPORT=)
target_compile_definitions(speex PRIVATE RANDOM_PREFIX=speex)

if("${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
  target_sources(cubeb PRIVATE
    src/cubeb_audiounit.cpp
    src/cubeb_osx_run_loop.c)
  target_compile_definitions(cubeb PRIVATE USE_AUDIOUNIT)
  target_link_libraries(cubeb PRIVATE "-framework AudioUnit" "-framework CoreAudio" "-framework CoreServices")
endif()

if("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
  target_sources(cubeb PRIVATE
    src/cubeb_pulse.c
    src/cubeb_alsa.c
    src/cubeb_jack.cpp)
  target_compile_definitions(cubeb PRIVATE USE_PULSE USE_ALSA USE_JACK)
  target_link_libraries(cubeb PRIVATE dl pthread pulse asound jack)
endif()

if("${CMAKE_SYSTEM_NAME}" MATCHES "Windows")
  target_sources(cubeb PRIVATE
    src/cubeb_wasapi.cpp
    src/cubeb_winmm.c)
  target_compile_definitions(cubeb PRIVATE USE_WASAPI USE_WINMM)
  target_link_libraries(cubeb PRIVATE winmm)
endif()

# The platform-specific bits below are untested and probably don't work.
if("${CMAKE_SYSTEM_NAME}" MATCHES "Android")
  target_sources(cubeb PRIVATE
    src/cubeb_opensl.c
    src/cubeb_audiotrack.c)
  target_compile_definitions(cubeb PRIVATE USE_OPENSL USE_AUDIOTRACK)
  target_link_libraries(cubeb PRIVATE OpenSLES)
endif()

if("${CMAKE_SYSTEM_NAME}" MATCHES "OpenBSD")
  target_sources(cubeb PRIVATE
    src/cubeb_sndio.c)
  target_compile_definitions(cubeb PRIVATE USE_SNDIO)
  target_link_libraries(cubeb PRIVATE sndio)
endif()

if("${CMAKE_SYSTEM_NAME}" MATCHES "OS2")
  target_sources(cubeb PRIVATE
    src/cubeb_kai.c)
  target_compile_definitions(cubeb PRIVATE USE_KAI)
  target_link_libraries(cubeb PRIVATE kai)
endif()

find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile @ONLY)
  add_custom_target(doc ALL
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs
    COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif()

enable_testing()

add_executable(test_sanity test/test_sanity.cpp)
target_link_libraries(test_sanity PRIVATE cubeb)
add_test(sanity test_sanity)

add_executable(test_tone test/test_tone.cpp)
target_link_libraries(test_tone PRIVATE cubeb)
add_test(tone test_tone)

add_executable(test_audio test/test_audio.cpp)
target_link_libraries(test_audio PRIVATE cubeb)
add_test(audio test_audio)

add_executable(test_record test/test_record.cpp)
target_link_libraries(test_record PRIVATE cubeb)
add_test(record test_record)

add_executable(test_devices test/test_devices.c)
target_link_libraries(test_devices PRIVATE cubeb)
add_test(devices test_devices)

add_executable(test_resampler test/test_resampler.cpp src/cubeb_resampler.cpp $<TARGET_OBJECTS:speex>)
target_include_directories(test_resampler PRIVATE src)
target_link_libraries(test_resampler PRIVATE cubeb)
add_test(resampler test_resampler)

add_executable(test_duplex test/test_duplex.cpp)
target_link_libraries(test_duplex PRIVATE cubeb)
add_test(duplex test_duplex)

add_executable(test_latency test/test_latency.cpp)
target_link_libraries(test_latency PRIVATE cubeb)
add_test(latency test_latency)

add_executable(test_ring_array test/test_ring_array.cpp)
target_include_directories(test_ring_array PRIVATE src)
target_link_libraries(test_ring_array PRIVATE cubeb)
add_test(ring_array test_ring_array)

add_executable(test_utils test/test_utils.cpp)
target_include_directories(test_utils PRIVATE src)
target_link_libraries(test_utils PRIVATE cubeb)
add_test(utils test_utils)
